from tok import TOKEN
from ya_disk import YandexDisk
    
# Задача №1 unit-tests
def top_3(courses, mentors):

    # Добавьте в список всех преподавателей со всех курсов
    all_list = []
    for m in mentors:
        all_list += m

    # Сделайте список all_names_list, состоящий только из имён, и заполните его
    all_names_list = []
    for mentor in all_list:
        name = mentor.split()[0]
        all_names_list.append(name)
    # Уникальные имена будут в unique_names
    unique_names = set(all_names_list)

    # Подсчитайте встречаемость каждого имени через list.count()
    popular = []
    for name in unique_names:
        popular.append([name, all_names_list.count(name)]) # Добавьте подсчёт имён

    # Это код для сортировки списка с элементами вида [имя, количество] по убыванию встречаемости
    # Используйте его, как есть, или напишите собственный :)
    popular.sort(key=lambda x:x[1], reverse=True)

    # Получите топ-3 часто встречающихся имён из списка popular
    # Подсказка: возьмите срез списка
    top_3 = popular[:3]
    final_string = ''
    for name, count in top_3:
        final_string += f'{name}: {count} раз(а), '
    
    return final_string[:-2]

def super_name(courses, mentors):
    
    # Делаем список списков имён
    mentors_names = []
    for m in mentors:
        course_names = []
        for name in m:
            course_names.append(name.split()[0]) # Допишите код здесь
            # Допишите ниже код, который добавляет списки имён в общий список mentors_names:
        mentors_names.append(course_names)
    # Храните здесь пары курсов, в которых есть совпавшие имена
    pairs = []
    return_line = ''
    # # Попарное сравнение "наборов" преподавателей на курсах. Каждую новую пару запоминаем для исключения повторов.
    for id1 in range(len(mentors_names)):
        for id2 in range(len(mentors_names)):
                # Проверьте, что вы не сравниваете список сам с собой:
            if id2 > id1:
                # Допишите ниже код для сравнения двух "наборов" преподавателей. Подсказка: используйте множества
                intersection_set = set(mentors_names[id1]) & set(mentors_names[id2])
                if len(intersection_set) > 0: # Допишите проверку, что результат не пустой, имена есть
                    # Допишите ниже код, который проверяет, что эта пара ещё не встречалась
                    pair = f"'{courses[id1]}' и '{courses[id2]}'"
                    # Если pair еще не встречалась, то выведите на экран два курса и список преподавателей, которые есть на обоих курсах
                    if pair not in pairs:
                        pairs.append(pair)
                        # Отсортируйте имена по алфавиту. Подсказка: используйте sorted() для списка
                        all_names_sorted = sorted(list(intersection_set))
                        # Допишите конструкцию вывода результата. Можете использовать string.join()
                        if len(return_line) == 0:
                            return_line += f"На курсах '{courses[id1]}' и '{courses[id2]}' преподают: {', '.join(all_names_sorted)}"
                        else:
                            return_line += f"\nНа курсах '{courses[id1]}' и '{courses[id2]}' преподают: {', '.join(all_names_sorted)}"
    return return_line

def name_info(courses, mentors):

    codes_info = [
        "",
        "1 — число цели, которая проявляется в форме агрессивности и амбиций",
        "2 — число равновесия и контраста одновременно, поддерживает равновесие, смешивая позитивные и негативные качества",
        "3 — неустойчивость, объединяет талант и весёлость, символ приспосабливаемости",
        "4 — означает устойчивость и прочность",
        "5 — символизирует риск, свободу и душевное беспокойство, которое толкает человека к путешествиям и новому опыту. С одной стороны, это самое счастливое число, с другой — самое непредсказуемое",
        "6 — символ надёжности. Идеальное число, которое делится как на чётное, так и на нечётное, объединяя элементы каждого",
        "7 — символизирует тайну, а также изучение и знание как путь исследования неизвестного и невидимого",
        "8 — число материального успеха, означает надёжность, доведённую до совершенства, символ всеобщего успеха",
        "9 — указывает на сильную личность с потенциальным интеллектом, способную к высокому развитию"
    ]
    # Здесь ничего менять не нужно, это готовый код, который считает число имени
    def calc_namecode(name):
        letters = ["", "А", "Б", "В", "Г", "Д", "Е", "Ё", "Ж", "З", "И", "Й", "К", "Л", "М", "Н", "О", "П", "Р", "С", "Т",
                "У", "Ф", "Х", "Ц", "Ч", "Ш", "Щ", "Ъ", "Ы", "Ь", "Э", "Ю", "Я"]

        name = name.upper()
        code = 0
        for letter in name:
            try:
                ltr_code = letters.index(letter) % 9
            except:
                continue
            if ltr_code == 0:
                ltr_code = 9
            code += ltr_code

        while code > 9:
            curr = code // 10 + code % 10
            code = curr

        return code

    # Добавьте сюда ваш код из Задачи 1
    all_list = []
    for m in mentors:
        all_list += m

    all_names_list = []
    for mentor in all_list:
        name = mentor.split()[0]
        all_names_list.append(name)
    # Уникальные имена будут в unique_names
    unique_names = set(all_names_list)

    # Этот код создаст вам уже готовый (пока что пустой) список, в который вы будете добавлять имена
    names_codes = [[] for n in range(10)]

    # Подсказка: в список names_codes дописывайте список имён с группировкой по числу имени.
    # Рекомендуем для простоты список с именами записывать по индексу, который равняется числу имени
    # Например, код имени Владимир — 2, и итоговый результат был бы
    # names_codes = [[], [], ["Владимир"]] - внутренний список с именем Владимир находится по индексу 2 в списке names_codes
    # Самый первый список с индексом 0 будет всегда пустым, т. к. нет числа имени 0

    # Перебираем все имена и группируем их по числу имени
    for name in unique_names:
        # Команду ниже используйте как есть - она вычисляет число имени. На входе функция принимает имя (регистр не важен)
        # На выходе возвращает целое число от 1 до 9 - это число имени. Например, если введёте "Анна" - получите 5
        code = calc_namecode(name)

        # Допишите код, который добавит ещё одно имя к нужному числу имени в списке names_codes
        names_codes[code].append(name)

    # Выводим окончательный результат на экран
    return_line = ''
    for id, _ in enumerate(names_codes):
        if id > 0:
            # Допишите вывод расшифровки числа имени из codes_info
            # Должно выводиться так: 1 — число цели, которая проявляется в форме агрессивности и амбиций
            print(codes_info[id])
            
            # Теперь нужно отсортировать имена в алфавитном порядке. Подсказка: используйте sorted() для списка
            # Допишите код ниже:
            all_names_sorted = sorted(names_codes[id])
        
            # Допишите код, который выводит сообщение на экран
            # Должно выводиться так: Коду 1 соответствуют: Азамат, Денис, Роман, Ринат, Евгений, Адилет, Сергей
            if len(return_line) == 0: 
                return_line += f"Коду {id} соответствуют: {', '.join(all_names_sorted)}"
            else:
                return_line += f"\nКоду {id} соответствуют: {', '.join(all_names_sorted)}"
    return return_line

# Задача №2 Автотест API Яндекса
def YD_create_folder(folder):
    yd = YandexDisk(token=TOKEN)
    res = yd.create_folder(folder)
    return res

def YD_delete_folder(folder):
    yd = YandexDisk(token=TOKEN)
    res = yd.delete_folder(folder)
    return res

if __name__ == '__main__':
    courses = ["Python-разработчик с нуля", "Java-разработчик с нуля", "Fullstack-разработчик на Python", "Frontend-разработчик с нуля"]

    mentors = [
        ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев", "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина", "Азамат Искаков", "Роман Гордиенко"],
        ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев", "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев", "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
        ["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский", "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая", "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
        ["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин", "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин", "Михаил Ларченко"]
    ]
    
    print(top_3(courses, mentors))
    print()
    print(super_name(courses, mentors))
    print()
    print(name_info(courses, mentors))
    print(YD_delete_folder("Netology homework"))
    print(YD_create_folder("Netology homework"))
    
    